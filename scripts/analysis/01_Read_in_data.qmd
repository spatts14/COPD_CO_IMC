---
title: "01_Read_in_data"
author: "Sara Patti"
format: 
    html:
        mainfont: "Arial"
        toc: true
        toc-title: "Index"
editor: visual
---

# Background information

Spatial Experiment (SPE) - The SpatialExperiment class is used to organize and analyze spatially resolved data. This class stores metadata such as the x, y and z cordinates of individual cells as well as protein expression values and clinical data.

SingleCellExperiment (SCE) - Originally created for scRNA-seq data but is very similar to SPE. A lot of overlap between the two. In theory, SPE and SCE could be used to analyse both RNA-seq data and IMC data together. The main difference between the two is in the way that spatial information is stored. in SCE, locations are stored in the 'colData' slot whilst in SPE containers, locations are stored in the 'spatialCoords' slot.


```{r}
# Load packages
library(imcRtools) 
library(cytomapper) 
library(openxlsx) 
library(stringr) 
library(dittoSeq)
library(RColorBrewer) 
library(ggridges)
library(gridExtra)
library(readxl)
```

```{r}
setwd("/Users/sarapatti/Desktop/PhD_projects/Llyod_lab/COPD_CO_IMC/") #CONFIG
getwd()
```


```{r}
## Check if the log file exists, if it does, then delete it for the new run
if (file.exists("../logs/1_ReadInTheData.log")) {
  file.remove("../logs/1_ReadInTheData.log")
}

## Capture messages and errors to a file
zz <- file("../logs/1_ReadInTheData.log", open = "a")
sink(zz, type = "message", append = TRUE)
message("### ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
  " | LOG MESSAGE: Start the ReadInTheData.R module\n")
```


```{r}
spe = read_steinbock("../../data/") #CONFIG
```

# Format data

```{r}
# Set the 'colnames' of each object to generate unique identifiers for each cell.
colnames(spe) = paste0(spe$sample_id, "_", spe$ObjectNumber)
```

```{r}
# Assign the Excel metadata to a variable, such as 'meta'.
meta = read_excel("../../data/meta_data/meta.xlsx", sheet= "meta_IMC") #CONFIG
```

# From this we extract a number of variables that we will use to annotate the data.

```{r}
meta_cat = colnames(meta)

# Loop through all columns in `meta`
for (col in meta_cat) {
  # Dynamically create a new column in `spe` with the same name as in `meta`
  spe[[col]] = meta[[col]][match(spe$sample_id, meta$image)]
}
```

############### SPLIT INTO NEW DOCUMENT HERE

# Count transformation

-   To avoid analysis biases from these high-expressing cells, the expression counts are commonly transformed or clipped
-   Transformation using inverse hyperbolic sine transformation on data
-   While the cofactor for CyTOF data is often set to 5, IMC data usually display much lower counts. We therefore apply a cofactor of 1

```{r}
# apply transformation
assay(spe, "exprs") = asinh(counts(spe)/1)
```

Create directories to show before and after transformation

```{r}
# Define the base directory
base_dir = "../../analysis/figures/"

# Create directories with a helper function
create_dir <- function(path) {
  if (!dir.exists(path)) {
    dir.create(path, showWarnings = FALSE, recursive = TRUE)
  }
}

# Create the main directory and subdirectories
create_dir(base_dir)
create_dir(file.path(base_dir, "001_ReadInTheData"))
create_dir(file.path(base_dir, "001_ReadInTheData/count_transformation_before"))
create_dir(file.path(base_dir, "001_ReadInTheData/count_transformation_after"))
create_dir(file.path(base_dir, "001_ReadInTheData/count_transformation_both"))
```

# Format data

```{r}
unique_sample_id = unique(spe$slide_ID) 
unique_markers = unique(rownames(spe))
```

# Determine what to group by
```{r}
group_by = "treatment"
```


View data before transformation only

```{r}
# Outer loop: Iterate over unique markers
for (j in seq_along(unique_markers)) {
  marker_to_plot <- unique_markers[j]
  print(marker_to_plot)
  # Define directory for the current marker
  directory_path <- paste0("../../analysis/figures/001_ReadInTheData/count_transformation_before/")
  
  # Create the plot
  plot <- dittoRidgePlot(spe, var = marker_to_plot, group.by = group_by, assay = "counts") +
        ggtitle(paste(marker_to_plot, "- before transformation grouped by", group_by)) +
        scale_fill_viridis_d(option = "turbo", name = group_by) +
        ylab(group_by) +
        theme(
          axis.text.x = element_text(size = 10),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank()
        )
      
    # Save the plot
    filename <- paste0(directory_path, marker_to_plot,"_", group_by, "_before_transformation.png")
    png(filename, res = 600, units = "in", width = 15, height = 15)
    print(plot) # Use print() instead of plot()
    dev.off()
}
```

View data after transformation only

```{r}
for (j in seq_along(unique_markers)) {
  marker_to_plot <- unique_markers[j]
  print(marker_to_plot)
  # Define directory for the current marker
  directory_path <- paste0("../../analysis/figures/001_ReadInTheData/count_transformation_after/")
  
  # Create the plot
  plot <- dittoRidgePlot(spe, var = marker_to_plot, group.by = group_by, assay = "exprs") +
        ggtitle(paste(marker_to_plot, "- after transformation grouped by", group_by)) +
        scale_fill_viridis_d(option = "turbo", name = group_by) +
        ylab(group_by) +
        theme(
          axis.text.x = element_text(size = 10),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank()
        )
      
    # Save the plot
    filename <- paste0(directory_path, marker_to_plot,"_", group_by, "_after_transformation.png")
    png(filename, res = 600, units = "in", width = 15, height = 15)
    print(plot) # Use print() instead of plot()
    dev.off()
}
```


View both before and after transformation

```{r}
# Outer loop: Iterate over unique markers
for (j in seq_along(unique_markers)) {
  marker_to_plot <- unique_markers[j]
  print(marker_to_plot)
  # Define directory for the current marker
  directory_path <- paste0("../../analysis/figures/001_ReadInTheData/count_transformation_both/")
  
  # Create the plot
  plot_before <- dittoRidgePlot(spe, var = marker_to_plot, group.by = group_by, assay = "counts") +
        ggtitle(paste(marker_to_plot, "- before transformation grouped by", group_by)) +
        scale_fill_viridis_d(option = "turbo", name = group_by) +
        ylab(group_by) +
        theme(
          axis.text.x = element_text(size = 10),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank()
        )

  plot_after <- dittoRidgePlot(spe, var = marker_to_plot, group.by = group_by, assay = "exprs") +
        ggtitle(paste(marker_to_plot, "- after transformation grouped by", group_by)) +
        scale_fill_viridis_d(option = "turbo", name = group_by) +
        ylab(group_by) +
        theme(
          axis.text.x = element_text(size = 10),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank()
        )
  # Plot side by side  
  both <- grid.arrange(plot_before, plot_after, ncol=2)
    
  # Save the plot
  filename <- paste0(directory_path, marker_to_plot, "_before_and_after_transformation.png")
  ggsave(filename, plot = both, width = 10, height = 5)
}
```

