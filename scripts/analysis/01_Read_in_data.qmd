---
title: "01_Read_in_data"
author: "Sara Patti"
format: 
    html:
        mainfont: "Arial"
        toc: true
        toc-title: "Index"
editor: source
---

# Background information

Spatial Experiment (SPE) - The SpatialExperiment class is used to organize and analyze spatially resolved data. This class stores metadata such as the x, y and z cordinates of individual cells as well as protein expression values and clinical data.

SingleCellExperiment (SCE) - Originally created for scRNA-seq data but is very similar to SPE. A lot of overlap between the two. In theory, SPE and SCE could be used to analyse both RNA-seq data and IMC data together. The main difference between the two is in the way that spatial information is stored. in SCE, locations are stored in the 'colData' slot whilst in SPE containers, locations are stored in the 'spatialCoords' slot.


```{r}
# Load packages
library(imcRtools) 
library(cytomapper) 
library(openxlsx) 
library(stringr) 
library(dittoSeq)
library(RColorBrewer)
library(Polychrome)
library(pals)
library(ggridges)
library(gridExtra)
library(readxl)
library(dplyr)
library(viridis)
```

```{r}
wd = "/Users/sarapatti/Desktop/PhD_projects/Llyod_lab/COPD_CO_IMC/" #CONFIG
setwd(wd)
getwd()
```


```{r}
## Check if the log file exists, if it does, then delete it for the new run
if (file.exists("../logs/01_ReadInTheData.log")) {
  file.remove("../logs/01_ReadInTheData.log")
}

## Capture messages and errors to a file
zz <- file("../logs/01_ReadInTheData.log", open = "a")
sink(zz, type = "message", append = TRUE)
message("### ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
  " | LOG MESSAGE: Start the ReadInTheData.qmd module\n")
```


```{r}
data_path = "../../data/" #CONFIG
spe = read_steinbock(data_path) 
```

# Format data

```{r}
# Set the 'colnames' of each object to generate unique identifiers for each cell.
colnames(spe) = paste0(spe$sample_id, "_", spe$ObjectNumber)
```

```{r}
# Assign the Excel metadata to a variable, such as 'meta'.
path_to_meta = "../../data/meta_data/meta.xlsx" #CONFIG
sheet_name = "meta_IMC" #CONFIG

meta = read_excel(path_to_meta, 
                  sheet= ) 
```

# From this we extract a number of variables that we will use to annotate the data.

```{r}
meta_cat = colnames(meta)

# Loop through all columns in `meta`
for (col in meta_cat) {
  # Dynamically create a new column in `spe` with the same name as in `meta`
  spe[[col]] = meta[[col]][match(spe$sample_id, meta$image_ID)]
}
```



# Define color schemes
## TODO: How should we change this so it only if for discrete variables? We want to use a cmap for continous variables and a palette for discrete 
```{r}
# Initialize an empty list to store color vectors
color_vectors <- list()  

# Assign a color palette to every column in metadata
for (col in meta_cat) {
    
    # Use the unique values in the specified column of 'spe'
    unique_values <- unique(spe[[col]])
    
    # Ensure the palette has enough colors for the unique values
    if (length(unique_values) > 0) {
        col_palette <- setNames(viridis(length(unique_values)), unique_values)
        color_vectors[[col]] <- col_palette  # Store in list
    } else {
        print(paste("No unique values found in column", col))
    }
}

# add the list of color vectors to the metadata of the spe object
metadata(spe)$color_vectors <- color_vectors

```


# Load image data

## Read in images
```{r}
images_path = "../../data/img/" # PUT IN CONFIG
images <- loadImages(images_path) 
```

## Read in masks
```{r}
mask_path = "../../data/masks/" # PUT IN CONFIG
masks <- loadImages(mask_path, as.is = TRUE)
```

# Set the channelNames for easy visualization
```{r}
channelNames(images) <- rownames(spe)
```

# Add metadata for image vizualization
## TODO: How would we CONFIG this?
```{r}
all.equal(names(images), names(masks))

image_ID <- names(images)
slide_ID <- meta$slide_ID[match(image_ID, meta$image_ID)]
treatment <- meta$treatment[match(image_ID, meta$image_ID)]

# Modify the metadata of the 'images' and 'masks' objects. 'mcols' refers to 'metadata columns'. 
# The Dataframe() function creates a new data frame object with 3 columns, each representing metadata information.
mcols(images) <- mcols(masks) <- DataFrame(image_ID = names(images), slide_ID = slide_ID, treatment = treatment)
```
```{r}
# Remove slides that are laser test
slides_to_remove = c("D6_2_D7_2_003", 
                     "D6_2_D7_2_004", 
                     "D6_2_D7_2_005", 
                     "D1_D2_D3_D4_005")


# Filtered spe
spe <- spe[, spe$sample_id != slides_to_remove]

# Filtered masks
masks <- masks[!(names(masks) %in% slides_to_remove)]

# Filtered images
images <- images[!(names(images) %in% slides_to_remove)]
```


# Generate single-cell data from images
```{r}
cytomapper_sce <- measureObjects(masks, image = images, img_id = "image_ID")
```

```{r}
# create a new directory
dir.create("../../analysis/files", showWarnings = FALSE)

# We can save the generated data objects for further downstream processing and analysis.
saveRDS(spe, "../../analysis/files/speM1.rds")
saveRDS(images, "../../analysis/files/imagesM1.rds")
saveRDS(masks, "../../analysis/files/masksM1.rds")
```


```{r}
message("### ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), " | LOG MESSAGE: The ReadInTheData.qmd module finished successfully\n")
```

