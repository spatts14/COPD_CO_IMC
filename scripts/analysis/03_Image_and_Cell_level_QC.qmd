---
title: "03_Image_and_Cell_level_QC"
author: "Sara Patti"
format: 
    html:
        mainfont: "Arial"
        toc: true
        toc-title: "Index"
editor: source
---

```{r}
setwd("/Users/sarapatti/Desktop/PhD_projects/Llyod_lab/COPD_CO_IMC/") #CONFIG
getwd()
```

```{r}
## Check if the log file exists, if it does, then delete it for the new run
if (file.exists("../logs/03_Image_and_Cell_level_QC.log")) {
  file.remove("../logs/03_Image_and_Cell_level_QC.log")
}

## Capture messages and errors to a file
zz <- file("../logs/02_Normalize_data.log", open = "a")
sink(zz, type = "message", append = TRUE)
message("### ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
  " | LOG MESSAGE: Start the 03_Image_and_Cell_level_QC.qmd module\n")
```

# Load packages

```{r}
library(cytomapper)
library(cytoviewer)
library(zoom)
library(dittoSeq)
library(viridis)
library(tidyverse)
library(ggrepel)
library(EBImage)
library(ggplot2)
library(ggrepel)
library(scuttle)
library(mclust)
library(gridExtra)
```

# Set seed

```{r}
set.seed(20250128)
```

# Set variables

```{r}
ID = "image_ID"
```

# Load data

```{r}
# Reload the relevant objects
images <- readRDS("../../analysis/files/imagesM1.rds")
masks <- readRDS("../../analysis/files/masksM1.rds")
spe <- readRDS("../../analysis/files/speM1.rds")
```

# Review
```{r}
dir.create("../../analysis/figures/03_Image_and_Cell_level_QC", showWarnings = FALSE)
```


# Image level QC
```{r}
# Subset on cells
subset_num = 2000
cur_cells <- sample(seq_len(ncol(spe)), subset_num)
```

```{r}
# Create heatmap all. single cells with their respective marker expression profiles, can view distinct patterns. 
annotation = "treatment" # CONFIG
white_to_blue <- colorRampPalette(c("white", "blue"))(100)

# Create the heatmap
plot <- dittoHeatmap(spe[,cur_cells], #subset on 2000 cells
             genes = rownames(spe),
             assay = "exprs", 
             cluster_cols = TRUE, 
             scale = "none",
             heatmap.colors = white_to_blue, 
             annot.by = annotation,
             annotation_colors = list(indication = metadata(spe)$color_vectors[[annotation]])
             )
# Save file
filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"heatmap_all_cells.png"), plot = plot, width = 10, height = 8, units = "in", dpi = 300)
```

```{r}
# Calculates the SNR and signal intensity for each image (at the pixel level)
cur_snr <- lapply(names(images), function(x){
    img <- images[[x]]
    mat <- apply(img, 3, function(ch){
        # Otsu threshold
        thres <- otsu(ch, range = c(min(ch), max(ch)), levels = 65536)
        # Signal-to-noise ratio
        snr <- mean(ch[ch > thres]) / mean(ch[ch <= thres])
        # Signal intensity
        ps <- mean(ch[ch > thres])
        
        return(c(snr = snr, ps = ps))
    })
    t(mat) %>% as.data.frame() %>% 
        mutate(image = x,
               marker = colnames(mat)) %>% 
        pivot_longer(cols = c(snr, ps))
})

```


```{r}
# Combines all data frames in cur_snr into a single list data frame
cur_snr <- do.call(rbind, cur_snr)
```


```{r}
plot = cur_snr %>% 
    group_by(marker, name) %>%
    summarize(log_mean = log2(mean(value))) %>%
    pivot_wider(names_from = name, values_from = log_mean) %>%
    ggplot() +
    geom_point(aes(ps, snr)) +
    geom_label_repel(aes(ps, snr, label = marker)) +
    theme_minimal(base_size = 15) + ylab("Signal-to-noise ratio [log2]") +
    xlab("Signal intensity [log2]") + 
    theme_bw()

# Save file
filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"SNR_pixel_level.png"), plot = plot, width = 10, height = 8, units = "in", dpi = 300)
```



```{r}
#  Remove markers that have a positive signal of <2 per image.
cur_snr <- cur_snr %>% 
  pivot_wider(names_from = name, values_from = value) %>%
  filter(ps > 2) %>%
  pivot_longer(cols = c(snr, ps))

plot <- cur_snr %>% 
  group_by(marker, name) %>%
  summarize(log_mean = log2(mean(value))) %>%
  pivot_wider(names_from = name, values_from = log_mean) %>%
  ggplot() +
  geom_point(aes(ps, snr)) +
  geom_label_repel(aes(ps, snr, label = marker), size = 2.5) +
  theme_minimal(base_size = 15) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
  ylab("Signal-to-noise ratio [log2]") +
  xlab("Signal intensity [log2]") +
  theme_bw()

# Save file
filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"SNR_pixel_adjusted.png"), plot = plot, width = 10, height = 8, units = "in", dpi = 300)
```

```{r}
# We can compute the percentage of covered image area
cell_density <- colData(spe) %>%
    as.data.frame() %>%
    group_by(sample_id) %>%
    # Compute the number of pixels covered by cells and 
    # the total number of pixels
    summarize(cell_area = sum(area),
              no_pixels = mean(width_px) * mean(height_px)) %>%
    # Divide the total number of pixels 
    # by the number of pixels covered by cells
    mutate(covered_area = cell_area / no_pixels)

# Visualize the image area covered by cells per image
plot <- ggplot(cell_density) +
        geom_point(aes(reorder(sample_id, covered_area), covered_area)) + 
        theme_minimal(base_size = 15) +
        theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 15)) +
        ylim(c(0, 1)) +
        ylab("% covered area") + xlab("") +
        theme_bw()

# Save file
filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"cell_density.png"), plot = plot, width = 20, height = 8, units = "in", dpi = 300)
```


## NOT WORKING
```{r}
# Some of the images have quite a low cell coverage, we might want to take a look at these to be sure that erroneous segmentation has not been applied or that the tissue might be damaged/destroyed. Normalize and clip images.
low_coverage_ids <- cell_density %>%
  filter(covered_area < 0.25) %>%
  pull(sample_id)

for (i in seq_along(low_coverage_ids)) {
  
  # Normalize and clip images
  cur_images <- images[low_coverage_ids[i]]
  cur_image <- cytomapper::normalize(cur_images)
  cur_image <- cytomapper::normalize(cur_image, inputRange = c(0, 0.2))
  
  plotPixels(cur_image,
             mask = masks[low_coverage_ids[i]],
             img_id = "image_ID",
             missing_colour = "white",
             colour_by = c("CD3", "CollagenI", "ECadherin", "DNA1"),
             colour = list(CD3 = c("black", "yellow"),
                           CollagenI = c("black", "red"),
                           ECadherin = c("black", "green"),
                           DNA1 = c("black", "blue")),
             legend = list(colour_by.title.cex = 0.3,
                           colour_by.labels.cex = 0.3))

}

```


# Should probably remove these earlier
```{r}
#### This won't work on HPC as it requires user input ####
# Remove slides that are poor quality or are laser test
length(unique(spe$sample_id)) # Check the length before we remove

# Remove samples that were the laser test
sample_id_remove <- c("D6_2_D7_2_003", 
                      "D6_2_D7_2_004", 
                      "D6_2_D7_2_005", 
                      "D1_D2_D3_D4_005") # insert sample_id's to be removed here.


####
#### This we can make as an an option for the config file if the user knows which images to remove ####
# The following will remove any rows in sample_id that are also found in the sample_id_remove vector.
spe <- spe[,!spe$sample_id %in% sample_id_remove]
length(unique(spe$sample_id))# if we check the length, we should see 1 less image.
```


```{r}
# Heatmap of mean expression per image
image_mean <- aggregateAcrossCells(spe, 
                                   ids = spe$slide_ID, 
                                   statistics="mean",
                                   use.assay.type = "counts")
assay(image_mean, "exprs") <- asinh(counts(image_mean))

plot <- dittoHeatmap(image_mean, 
             genes = rownames(spe),
             assay = "exprs", 
             cluster_cols = TRUE, 
             scale = "none",
             heatmap.colors = white_to_blue, 
             annot.by = c("treatment", "slide_ID", "patient_ID"),
             #annotation_colors = list(treatment = metadata(spe)$color_vectors$treatment,
             #                       slide_ID = metadata(spe)$color_vectors$slide_ID),
             show_colnames = TRUE)

# Save file
filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"heatmap_mean_expression_per_image.png"), plot = plot, width = 10, height = 8, units = "in", dpi = 300)
```


# Cell-level Quality Control
```{r}
# Calculate the SNR at the single-cell level
mat <- sapply(seq_len(nrow(spe)), function(x){
    cur_exprs <- assay(spe, "exprs")[x,]
    cur_counts <- assay(spe, "counts")[x,]
    
    cur_model <- Mclust(cur_exprs, G = 2)
    mean1 <- mean(cur_counts[cur_model$classification == 1])
    mean2 <- mean(cur_counts[cur_model$classification == 2])
    
    signal <- ifelse(mean1 > mean2, mean1, mean2)
    noise <- ifelse(mean1 > mean2, mean2, mean1)
    
    return(c(snr = signal/noise, ps = signal))
})
    
```

```{r}
cur_snr <- t(mat) %>% as.data.frame() %>% 
        mutate(marker = rownames(spe))

plot <- cur_snr %>% ggplot() +
    geom_point(aes(log2(ps), log2(snr))) +
    geom_label_repel(aes(log2(ps), log2(snr), label = marker)) +
    theme_minimal(base_size = 15) + ylab("Signal-to-noise ratio [log2]") +
    xlab("Signal intensity [log2]")


# Save plot
filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"SNR_cell_level.png"), plot = plot, width = 10, height = 8, units = "in", dpi = 300)
```



```{r}
# View distributions of cell size across the individual images
plot <- dittoPlot(spe, var = "area", 
          group.by = "slide_ID", 
          plots = "boxplot") +
        ylab("Cell area") + xlab("")

filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"area_distribution.png"), plot = plot, width = 10, height = 8, units = "in", dpi = 300)
```


```{r}
# Set area threshold
min = 3
max = 300

# Calculate overall statistics
summary(spe$area)
mean_area <- mean(spe$area)
num_below_threshold <- sum(spe$area < min) #### Config setting
num_above_threshold <- sum(spe$area > max) #### Config setting

print(paste0("mean area of a cell: ", mean_area))
print(paste0("number of cells with area <5: ", num_below_threshold))
print(paste0("number of cells with area >5 ", num_above_threshold))


# Remove cells below min area and above max area
spe <- spe[,spe$area >= min & spe$area <= max]
```
```{r}
# absolute measure of cell density (cells per mm^2)
cell_density <- colData(spe) %>%
  as.data.frame() %>%
  group_by(slide_ID) %>%
  summarize(cell_count = n(),
            no_pixels = mean(width_px) * mean(height_px)) %>%
  mutate(cells_per_mm2 = cell_count/(no_pixels/1000000))

ggplot(cell_density) +
  geom_point(aes(reorder(slide_ID, cells_per_mm2), cells_per_mm2)) + 
  theme_minimal(base_size = 15) + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8)) +
  ylab("Cells per mm2") + xlab("")


# Save plot
filename <- "../../analysis/figures/03_Image_and_Cell_level_QC/"
ggsave(paste0(filename,"cell_density_per_mm2.png"), plot = plot, width = 10, height = 8, units = "in", dpi = 300)
```


## GOT UP TO HERE ##
```{r}
multi_dittoPlot(spe, 
               vars = rownames(spe),
               group.by = "patient_id", plots = "ridgeplot", 
               assay = "exprs", 
               color.panel = metadata(spe)$color_vectors$patient_id)
```



```{r}

# We can also look at the differences in staining between images.
# Create directory if it doesn't exist


# Get the variables
vars <- rownames(spe)[rowData(spe)]

# Loop over the variables
for (var in vars) {
  # Create a plot for the current variable
  p <- dittoPlot(spe, var = var,
                 group.by = "patient_id", plots = "ridgeplot", 
                 assay = "exprs", 
                 color.panel = metadata(spe)$color_vectors$patient_id)

}

```
